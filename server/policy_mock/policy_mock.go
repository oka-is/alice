// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package policy_mock is a generated GoMock package.
package policy_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/wault-pw/alice/pkg/domain"
	policy "github.com/wault-pw/alice/server/policy"
)

// MockUserPolicy is a mock of IUserPolicy interface.
type MockUserPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockUserPolicyMockRecorder
}

// MockUserPolicyMockRecorder is the mock recorder for MockUserPolicy.
type MockUserPolicyMockRecorder struct {
	mock *MockUserPolicy
}

// NewMockUserPolicy creates a new mock instance.
func NewMockUserPolicy(ctrl *gomock.Controller) *MockUserPolicy {
	mock := &MockUserPolicy{ctrl: ctrl}
	mock.recorder = &MockUserPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPolicy) EXPECT() *MockUserPolicyMockRecorder {
	return m.recorder
}

// CanWrite mocks base method.
func (m *MockUserPolicy) CanWrite() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWrite")
	ret0, _ := ret[0].(error)
	return ret0
}

// CanWrite indicates an expected call of CanWrite.
func (mr *MockUserPolicyMockRecorder) CanWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWrite", reflect.TypeOf((*MockUserPolicy)(nil).CanWrite))
}

// Wrap mocks base method.
func (m *MockUserPolicy) Wrap(user domain.User) policy.IUserPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", user)
	ret0, _ := ret[0].(policy.IUserPolicy)
	return ret0
}

// Wrap indicates an expected call of Wrap.
func (mr *MockUserPolicyMockRecorder) Wrap(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockUserPolicy)(nil).Wrap), user)
}

// MockWorkspacePolicy is a mock of IWorkspacePolicy interface.
type MockWorkspacePolicy struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspacePolicyMockRecorder
}

// MockWorkspacePolicyMockRecorder is the mock recorder for MockWorkspacePolicy.
type MockWorkspacePolicyMockRecorder struct {
	mock *MockWorkspacePolicy
}

// NewMockWorkspacePolicy creates a new mock instance.
func NewMockWorkspacePolicy(ctrl *gomock.Controller) *MockWorkspacePolicy {
	mock := &MockWorkspacePolicy{ctrl: ctrl}
	mock.recorder = &MockWorkspacePolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspacePolicy) EXPECT() *MockWorkspacePolicyMockRecorder {
	return m.recorder
}

// CanManageCard mocks base method.
func (m *MockWorkspacePolicy) CanManageCard(card domain.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManageCard", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// CanManageCard indicates an expected call of CanManageCard.
func (mr *MockWorkspacePolicyMockRecorder) CanManageCard(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManageCard", reflect.TypeOf((*MockWorkspacePolicy)(nil).CanManageCard), card)
}

// CanManageWorkspace mocks base method.
func (m *MockWorkspacePolicy) CanManageWorkspace() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanManageWorkspace")
	ret0, _ := ret[0].(error)
	return ret0
}

// CanManageWorkspace indicates an expected call of CanManageWorkspace.
func (mr *MockWorkspacePolicyMockRecorder) CanManageWorkspace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanManageWorkspace", reflect.TypeOf((*MockWorkspacePolicy)(nil).CanManageWorkspace))
}

// Wrap mocks base method.
func (m *MockWorkspacePolicy) Wrap(user domain.User, uw domain.UserWorkspace) policy.IWorkspacePolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", user, uw)
	ret0, _ := ret[0].(policy.IWorkspacePolicy)
	return ret0
}

// Wrap indicates an expected call of Wrap.
func (mr *MockWorkspacePolicyMockRecorder) Wrap(user, uw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockWorkspacePolicy)(nil).Wrap), user, uw)
}
