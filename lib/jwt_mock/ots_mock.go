// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package jwt_mock is a generated GoMock package.
package jwt_mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	jwt "github.com/wault-pw/alice/lib/jwt"
)

// MockOts is a mock of IOts interface.
type MockOts struct {
	ctrl     *gomock.Controller
	recorder *MockOtsMockRecorder
}

// MockOtsMockRecorder is the mock recorder for MockOts.
type MockOtsMockRecorder struct {
	mock *MockOts
}

// NewMockOts creates a new mock instance.
func NewMockOts(ctrl *gomock.Controller) *MockOts {
	mock := &MockOts{ctrl: ctrl}
	mock.recorder = &MockOtsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOts) EXPECT() *MockOtsMockRecorder {
	return m.recorder
}

// Marshall mocks base method.
func (m *MockOts) Marshall() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshall")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshall indicates an expected call of Marshall.
func (mr *MockOtsMockRecorder) Marshall() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshall", reflect.TypeOf((*MockOts)(nil).Marshall))
}

// SetExp mocks base method.
func (m *MockOts) SetExp(exp time.Time) jwt.IOts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetExp", exp)
	ret0, _ := ret[0].(jwt.IOts)
	return ret0
}

// SetExp indicates an expected call of SetExp.
func (mr *MockOtsMockRecorder) SetExp(exp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExp", reflect.TypeOf((*MockOts)(nil).SetExp), exp)
}

// SetJti mocks base method.
func (m *MockOts) SetJti(jti string) jwt.IOts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJti", jti)
	ret0, _ := ret[0].(jwt.IOts)
	return ret0
}

// SetJti indicates an expected call of SetJti.
func (mr *MockOtsMockRecorder) SetJti(jti interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJti", reflect.TypeOf((*MockOts)(nil).SetJti), jti)
}

// Unmarshall mocks base method.
func (m *MockOts) Unmarshall(input string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshall", input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshall indicates an expected call of Unmarshall.
func (mr *MockOtsMockRecorder) Unmarshall(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshall", reflect.TypeOf((*MockOts)(nil).Unmarshall), input)
}
