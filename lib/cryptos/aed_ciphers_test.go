package cryptos

import (
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAES256GCM(t *testing.T) {
	t.Run("it works", func(t *testing.T) {
		key := []byte{
			0xe5, 0x2b, 0x97, 0xb9, 0xab, 0x3, 0x4e, 0x18,
			0xef, 0x1f, 0x1a, 0x3b, 0x12, 0xdb, 0xcd, 0xbc,
			0xc7, 0xe8, 0xeb, 0xbe, 0xda, 0xc2, 0x8a, 0xd0,
			0xcf, 0x19, 0x3d, 0x9a, 0xf9, 0x77, 0x7d, 0xd0}

		iv := []byte{
			0xd5, 0xb0, 0x41, 0x18, 0xde, 0x9a,
			0x73, 0xac, 0x33, 0x68, 0xce, 0x14}

		input := []byte{1, 2}
		addon := []byte{3, 4}
		want := []byte{
			0x91, 0xce, 0xc8, 0x34, 0xfc, 0x56, 0x14, 0xcf, 0xc0,
			0x5d, 0xe7, 0xa9, 0x35, 0x73, 0x74, 0x80, 0x21, 0x6d}

		cipher, err := NewAedCipher(AES256GCM).Init(key, iv)
		require.NoError(t, err)

		enc := cipher.Encrypt(input, addon)
		require.Equal(t, want, enc)

		dec, err := cipher.Decrypt(enc, addon)
		require.NoError(t, err)
		require.Equal(t, input, dec)
	})

	t.Run("it verifies signature", func(t *testing.T) {
		key := []byte{
			0xe5, 0x2b, 0x97, 0xb9, 0xab, 0x3, 0x4e, 0x18,
			0xef, 0x1f, 0x1a, 0x3b, 0x12, 0xdb, 0xcd, 0xbc,
			0xc7, 0xe8, 0xeb, 0xbe, 0xda, 0xc2, 0x8a, 0xd0,
			0xcf, 0x19, 0x3d, 0x9a, 0xf9, 0x77, 0x7d, 0xd0}

		iv := []byte{
			0xd5, 0xb0, 0x41, 0x18, 0xde, 0x9a,
			0x73, 0xac, 0x33, 0x68, 0xce, 0x14}

		input, addon := []byte{1, 2}, []byte{3, 4}

		cipher, err := NewAedCipher(AES256GCM).Init(key, iv)
		require.NoError(t, err)

		enc := cipher.Encrypt(input, addon)
		_, err = cipher.Decrypt(enc, append(addon, byte(1)))
		require.Error(t, err)
	})
}

func TestAedCipherSizes(t *testing.T) {
	type args struct {
		byte AedCipherByte
		want [3]int
	}

	tests := []args{
		{
			byte: AES256GCM,
			want: [3]int{32, 12, 16},
		}, {
			byte: AedCipherUnknown,
			want: [3]int{-1, -1, -1},
		},
	}

	for _, tt := range tests {
		t.Run(string(tt.byte), func(t *testing.T) {
			ks, is, bs := AedCipherSizes(tt.byte)
			require.Equal(t, tt.want, [3]int{ks, is, bs})
		})
	}
}
